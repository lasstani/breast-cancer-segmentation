{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import cv2\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "\n",
    "from scipy import ndimage as ndi\n",
    "from skimage.color import label2rgb\n",
    "from skimage import morphology\n",
    "import math\n",
    "\n",
    "from matplotlib import pylab as pylab\n",
    "from skimage import io\n",
    "from skimage import color\n",
    "from skimage.feature import canny\n",
    "from skimage.filters import sobel\n",
    "\n",
    "path= r'D:\\tanya\\Downloads\\all-mias\\mdb105.pgm'\n",
    "im = cv2.imread(path)\n",
    "\n",
    "imgray = cv2.cvtColor(im, cv2.COLOR_BGR2GRAY)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Функция для вывода изображения."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "def viewImage(image, name_of_window):\n",
    "    cv2.namedWindow(name_of_window, cv2.WINDOW_NORMAL)\n",
    "    cv2.imshow(name_of_window, image)\n",
    "    cv2.waitKey(0)\n",
    "    cv2.destroyAllWindows()\n",
    "#viewImage(img,'img')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "def minMaxNormalise(img):\n",
    "\n",
    "    norm_img = (img - img.min()) / (img.max() - img.min())\n",
    "\n",
    "    return norm_img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "norm_img = minMaxNormalise(imgray)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "def globalBinarise(img, thresh, maxval):\n",
    "\n",
    "    binarised_img = np.zeros(img.shape)\n",
    "    binarised_img[img >= thresh] = maxval\n",
    "\n",
    "    return binarised_img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "binarised_img = globalBinarise(norm_img, 0.2 ,1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "def editMask(mask, ksize=(23, 23), operation=\"open\"):\n",
    "\n",
    "    kernel = cv2.getStructuringElement(shape=cv2.MORPH_RECT, ksize=ksize)\n",
    "    \n",
    "    if operation == \"open\":\n",
    "        edited_mask = cv2.morphologyEx(mask, cv2.MORPH_OPEN, kernel)\n",
    "    elif operation == \"close\":\n",
    "        edited_mask = cv2.morphologyEx(mask, cv2.MORPH_CLOSE, kernel)\n",
    "\n",
    "    # Then dilate\n",
    "    edited_mask = cv2.morphologyEx(edited_mask, cv2.MORPH_DILATE, kernel)\n",
    "\n",
    "    return edited_mask"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "edited_mask = editMask(binarised_img, ksize=(23, 23), operation=\"open\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "edited_mask = edited_mask.astype(np.uint8)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "def sortContoursByArea(contours, reverse=True):\n",
    "\n",
    "    # Sort contours based on contour area.\n",
    "    sorted_contours = sorted(contours, key=cv2.contourArea, reverse=reverse)\n",
    "\n",
    "    # Construct the list of corresponding bounding boxes.\n",
    "    bounding_boxes = [cv2.boundingRect(c) for c in sorted_contours]\n",
    "\n",
    "    return sorted_contours, bounding_boxes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "def xLargestBlobs(mask, top_x=None, reverse=True):\n",
    "\n",
    "    # Find all contours from binarised image.\n",
    "    # Note: parts of the image that you want to get should be white.\n",
    "    contours, hierarchy = cv2.findContours(\n",
    "        image=mask, mode=cv2.RETR_EXTERNAL, method=cv2.CHAIN_APPROX_NONE\n",
    "    )\n",
    "\n",
    "    n_contours = len(contours)\n",
    "\n",
    "    # Only get largest blob if there is at least 1 contour.\n",
    "    if n_contours > 0:\n",
    "\n",
    "        # Make sure that the number of contours to keep is at most equal\n",
    "        # to the number of contours present in the mask.\n",
    "        if n_contours < top_x or top_x == None:\n",
    "            top_x = n_contours\n",
    "\n",
    "        # Sort contours based on contour area.\n",
    "        sorted_contours, bounding_boxes = sortContoursByArea(\n",
    "            contours=contours, reverse=reverse\n",
    "        )\n",
    "\n",
    "        # Get the top X largest contours.\n",
    "        X_largest_contours = sorted_contours[0:top_x]\n",
    "\n",
    "        # Create black canvas to draw contours on.\n",
    "        to_draw_on = np.zeros(mask.shape, dtype = 'int')\n",
    "\n",
    "        # Draw contours in X_largest_contours.\n",
    "        X_largest_blobs = cv2.drawContours(\n",
    "            image=to_draw_on,  # Draw the contours on `to_draw_on`.\n",
    "            contours=X_largest_contours,  # List of contours to draw.\n",
    "            contourIdx=-1,  # Draw all contours in `contours`.\n",
    "            color=1,  # Draw the contours in white.\n",
    "            thickness=-1,  # Thickness of the contour lines.\n",
    "        )\n",
    "\n",
    "    return n_contours, X_largest_blobs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "_, xlargest_mask  = xLargestBlobs(mask=edited_mask, top_x=1, reverse=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "def applyMask(img, mask):\n",
    "\n",
    "    masked_img = img.copy()\n",
    "    masked_img[mask == 0] = 0\n",
    "\n",
    "    return masked_img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "masked_img=applyMask(img=norm_img, mask = xlargest_mask)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "def checkLRFlip(mask):\n",
    "\n",
    "    # Get number of rows and columns in the image.\n",
    "    nrows, ncols = mask.shape\n",
    "    x_center = ncols // 2\n",
    "    y_center = nrows // 2\n",
    "\n",
    "    # Sum down each column.\n",
    "    col_sum = mask.sum(axis=0)\n",
    "    # Sum across each row.\n",
    "    row_sum = mask.sum(axis=1)\n",
    "\n",
    "    left_sum = sum(col_sum[0:x_center])\n",
    "    right_sum = sum(col_sum[x_center:-1])\n",
    "\n",
    "    if left_sum < right_sum:\n",
    "        LR_flip = True\n",
    "    else:\n",
    "        LR_flip = False\n",
    "\n",
    "    return LR_flip\n",
    "\n",
    "\n",
    "def makeLRFlip(img):\n",
    "\n",
    "    flipped_img = np.fliplr(img)\n",
    "\n",
    "    return flipped_img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "lr_flip = checkLRFlip(mask=xlargest_mask)\n",
    "if lr_flip:\n",
    "    flipped_img = makeLRFlip(img=masked_img)\n",
    "elif not lr_flip:\n",
    "    flipped_img = masked_img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "def clahe(img, clip=2.0, tile=(8, 8)):\n",
    "\n",
    "    img = cv2.normalize(\n",
    "        img,\n",
    "        None,\n",
    "        alpha=0,\n",
    "        beta=255,\n",
    "        norm_type=cv2.NORM_MINMAX,\n",
    "        dtype=cv2.CV_32F,\n",
    "    )\n",
    "    img_uint8 = img.astype(\"uint8\")\n",
    "\n",
    "    clahe_create = cv2.createCLAHE(clipLimit=clip, tileGridSize=tile)\n",
    "    clahe_img = clahe_create.apply(img_uint8)\n",
    "\n",
    "    return clahe_img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "clahe_img = clahe(flipped_img, clip=1.0, tile=(8, 8))\n",
    "viewImage(clahe_img,\"clahe_img\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "clahe_img = clahe_img.astype(np.uint8)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "def read_image(image):\n",
    "    image = color.rgb2gray(image)\n",
    "    return image"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "def apply_canny(image):\n",
    "    canny_img = canny(image,0.5)\n",
    "    return sobel(canny_img)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "from skimage.transform import hough_line, hough_line_peaks\n",
    "\n",
    "def get_hough_lines(canny_img):\n",
    "    h, theta, d = hough_line(canny_img)\n",
    "    lines = list()\n",
    "    print('\\nAll hough lines')\n",
    "    for _, angle, dist in zip(*hough_line_peaks(h, theta, d)):\n",
    "        print(\"Angle: {:.2f}, Dist: {:.2f}\".format(np.degrees(angle), dist))\n",
    "        x1 = 0\n",
    "        y1 = (dist - x1 * np.cos(angle)) / np.sin(angle)\n",
    "        x2 = canny_img.shape[1]\n",
    "        y2 = (dist - x2 * np.cos(angle)) / np.sin(angle)\n",
    "        lines.append({\n",
    "            'dist': dist,\n",
    "            'angle': np.degrees(angle),\n",
    "            'point1': [x1, y1],\n",
    "            'point2': [x2, y2]\n",
    "        })\n",
    "    print(lines)\n",
    "    \n",
    "    return lines"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [],
   "source": [
    "def shortlist_lines(lines):\n",
    "    MIN_ANGLE = 10\n",
    "    MAX_ANGLE = 50\n",
    "    MIN_DIST  = 50\n",
    "    MAX_DIST  = 700\n",
    "    \n",
    "    shortlisted_lines = [x for x in lines if \n",
    "                          (x['dist']>=MIN_DIST) &\n",
    "                          (x['dist']<=MAX_DIST) &\n",
    "                          (x['angle']>=MIN_ANGLE) &\n",
    "                          (x['angle']<=MAX_ANGLE)\n",
    "                        ]\n",
    "    print('\\nShorlisted lines')\n",
    "    for i in shortlisted_lines:\n",
    "        print(\"Angle: {:.2f}, Dist: {:.2f}\".format(i['angle'], i['dist']))\n",
    "        \n",
    "    return shortlisted_lines"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "from skimage.draw import polygon\n",
    "\n",
    "def remove_pectoral(shortlisted_lines):\n",
    "    shortlisted_lines.sort(key = lambda x: x['dist'])\n",
    "    pectoral_line = shortlisted_lines[0]\n",
    "    d = pectoral_line['dist']\n",
    "    theta = np.radians(pectoral_line['angle'])\n",
    "    \n",
    "    x_intercept = d/np.cos(theta)\n",
    "    y_intercept = d/np.sin(theta)\n",
    "    \n",
    "    return polygon([0, 0, y_intercept], [0, x_intercept, 0], image.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "All hough lines\n",
      "Angle: -0.50, Dist: 184.56\n",
      "Angle: 1.51, Dist: 326.61\n",
      "Angle: 0.50, Dist: 339.62\n",
      "Angle: 3.52, Dist: 356.62\n",
      "Angle: -1.51, Dist: 309.61\n",
      "Angle: -7.54, Dist: 226.58\n",
      "Angle: 13.58, Dist: 418.64\n",
      "Angle: -8.55, Dist: 168.56\n",
      "Angle: -13.58, Dist: 150.55\n",
      "Angle: -5.53, Dist: 240.58\n",
      "Angle: -4.53, Dist: 292.60\n",
      "Angle: -1.51, Dist: 278.60\n",
      "Angle: 0.50, Dist: 213.57\n",
      "Angle: -10.56, Dist: 200.57\n",
      "Angle: 8.55, Dist: 390.63\n",
      "Angle: 10.56, Dist: 378.63\n",
      "Angle: -15.59, Dist: 134.55\n",
      "Angle: -14.58, Dist: 107.54\n",
      "Angle: -17.60, Dist: 59.52\n",
      "Angle: -14.58, Dist: 94.53\n",
      "Angle: -19.61, Dist: 36.51\n",
      "Angle: -24.64, Dist: -10.50\n",
      "Angle: -27.65, Dist: -112.54\n",
      "Angle: -21.62, Dist: 14.51\n",
      "Angle: 17.60, Dist: 462.66\n",
      "Angle: -20.61, Dist: 435.65\n",
      "Angle: -33.69, Dist: -33.51\n",
      "Angle: -44.75, Dist: -348.62\n",
      "Angle: -28.66, Dist: -126.54\n",
      "Angle: -46.76, Dist: -375.63\n",
      "Angle: -24.64, Dist: -66.52\n",
      "Angle: -45.75, Dist: -361.62\n",
      "Angle: 90.00, Dist: 2.50\n",
      "Angle: -25.64, Dist: -81.53\n",
      "Angle: -25.64, Dist: -23.51\n",
      "Angle: -38.72, Dist: 191.57\n",
      "Angle: -26.65, Dist: -101.54\n",
      "Angle: -47.77, Dist: -393.64\n",
      "Angle: -53.80, Dist: -499.67\n",
      "Angle: -54.80, Dist: -513.68\n",
      "Angle: 69.89, Dist: 1001.85\n",
      "Angle: -33.69, Dist: -183.56\n",
      "Angle: -48.77, Dist: -412.64\n",
      "Angle: -63.85, Dist: -634.72\n",
      "Angle: -43.74, Dist: -322.61\n",
      "Angle: -60.84, Dist: -606.71\n",
      "Angle: -58.83, Dist: -584.70\n",
      "Angle: 82.96, Dist: 985.84\n",
      "Angle: -29.66, Dist: -144.55\n",
      "Angle: -72.91, Dist: -167.56\n",
      "Angle: -49.78, Dist: -426.65\n",
      "Angle: 21.62, Dist: 500.67\n",
      "Angle: -44.75, Dist: -335.62\n",
      "Angle: -64.86, Dist: -645.72\n",
      "Angle: -69.89, Dist: -693.74\n",
      "Angle: -30.67, Dist: -157.55\n",
      "Angle: -52.79, Dist: -473.66\n",
      "Angle: -70.89, Dist: -148.55\n",
      "Angle: -56.82, Dist: -537.69\n",
      "Angle: -46.76, Dist: 122.54\n",
      "Angle: -55.81, Dist: 20.51\n",
      "Angle: -55.81, Dist: -526.68\n",
      "Angle: -27.65, Dist: 346.62\n",
      "Angle: 81.96, Dist: 950.83\n",
      "Angle: -59.83, Dist: -25.51\n",
      "Angle: 20.61, Dist: 537.69\n",
      "Angle: -50.78, Dist: 88.53\n",
      "Angle: -42.74, Dist: -306.61\n",
      "Angle: -40.73, Dist: -268.59\n",
      "Angle: -40.73, Dist: 163.56\n",
      "Angle: -37.71, Dist: -233.58\n",
      "Angle: -9.55, Dist: 561.69\n",
      "Angle: -10.56, Dist: 549.69\n",
      "Angle: 23.63, Dist: 527.68\n",
      "Angle: -22.63, Dist: 408.64\n",
      "Angle: -41.73, Dist: -294.60\n",
      "Angle: -50.78, Dist: -441.65\n",
      "Angle: -67.88, Dist: -126.54\n",
      "Angle: -51.79, Dist: -456.66\n",
      "Angle: -14.58, Dist: 487.67\n",
      "Angle: -7.54, Dist: 583.70\n",
      "Angle: -17.60, Dist: 448.65\n",
      "Angle: -24.64, Dist: 377.63\n",
      "Angle: -26.65, Dist: 358.62\n",
      "Angle: -31.68, Dist: 297.60\n",
      "Angle: -38.72, Dist: -247.59\n",
      "Angle: -71.90, Dist: -715.75\n",
      "Angle: -35.70, Dist: -210.57\n",
      "Angle: -47.77, Dist: 106.54\n",
      "Angle: -52.79, Dist: 63.52\n",
      "Angle: -58.83, Dist: -13.50\n",
      "Angle: -61.84, Dist: -48.52\n",
      "Angle: -34.69, Dist: -194.57\n",
      "Angle: -66.87, Dist: -668.73\n",
      "Angle: -74.92, Dist: -732.75\n",
      "Angle: -8.55, Dist: 573.70\n",
      "Angle: -78.94, Dist: -804.78\n",
      "Angle: -15.59, Dist: 473.66\n",
      "Angle: -28.66, Dist: 335.62\n",
      "Angle: -11.56, Dist: 536.69\n",
      "Angle: -41.73, Dist: -281.60\n",
      "Angle: -57.82, Dist: -548.69\n",
      "Angle: -57.82, Dist: -563.69\n",
      "Angle: -76.93, Dist: -747.76\n",
      "Angle: -4.53, Dist: 620.71\n",
      "Angle: -77.93, Dist: -758.76\n",
      "Angle: 66.87, Dist: 1018.85\n",
      "Angle: -60.84, Dist: -37.51\n",
      "Angle: -65.87, Dist: -108.54\n",
      "Angle: 23.63, Dist: 576.70\n",
      "Angle: -16.59, Dist: 462.66\n",
      "Angle: -29.66, Dist: 323.61\n",
      "Angle: -32.68, Dist: 285.60\n",
      "Angle: -53.80, Dist: 51.52\n",
      "Angle: -88.99, Dist: -913.82\n",
      "Angle: -12.57, Dist: 525.68\n",
      "Angle: -68.88, Dist: -681.74\n",
      "Angle: -33.69, Dist: 272.59\n",
      "Angle: -6.54, Dist: 595.71\n",
      "Angle: -74.92, Dist: -187.56\n",
      "Angle: 88.99, Dist: 929.82\n",
      "Angle: -6.54, Dist: 607.71\n",
      "Angle: -14.58, Dist: 509.68\n",
      "Angle: -54.80, Dist: 31.51\n",
      "Angle: 4.53, Dist: 726.75\n",
      "Angle: 30.67, Dist: 594.71\n",
      "[{'dist': 184.56368657231633, 'angle': -0.5027932960893948, 'point1': [0, -21032.213630878858], 'point2': [1024, 95654.64881361711]}, {'dist': 326.6127027959958, 'angle': 1.5083798882681463, 'point1': [0, 12407.810096403262], 'point2': [1024, -26479.82274563393]}, {'dist': 339.61719019675525, 'angle': 0.5027932960893821, 'point1': [0, 38701.55299557478], 'point2': [1024, -77985.30944892415]}, {'dist': 356.62305833620985, 'angle': 3.519553072625687, 'point1': [0, 5809.218266470749], 'point2': [1024, -10839.78879016368]}, {'dist': 309.6068346565412, 'angle': -1.508379888268159, 'point1': [0, -11761.76791680483], 'point2': [1024, 27125.864925232032]}, {'dist': 226.57818432861586, 'angle': -7.541899441340782, 'point1': [0, -1726.294399975392], 'point2': [1024, 6008.047427776563]}, {'dist': 418.64445978598565, 'angle': 13.575418994413404, 'point1': [0, 1783.5521532127898], 'point2': [1024, -2457.1160551816697]}, {'dist': 168.55816361753546, 'angle': -8.547486033519558, 'point1': [0, -1134.0863039997791], 'point2': [1024, 5679.026555364294]}, {'dist': 150.55195029340712, 'angle': -13.575418994413418, 'point1': [0, -641.3968914182193], 'point2': [1024, 3599.2713169762364]}, {'dist': 240.58301691404904, 'angle': -5.5307262569832405, 'point1': [0, -2496.204137543429], 'point2': [1024, 8078.995571117285]}, {'dist': 292.6009665170866, 'angle': -4.525139664804477, 'point1': [0, -3708.6682692546774], 'point2': [1024, 9229.902244813573]}, {'dist': 278.5961339316534, 'angle': -1.508379888268159, 'point1': [0, -10583.691001066707], 'point2': [1024, 28303.941840970158]}, {'dist': 213.57369692785642, 'angle': 0.5027932960893821, 'point1': [0, 24338.090028144965], 'point2': [1024, -92348.77241635395]}, {'dist': 200.56920952709697, 'angle': -10.5586592178771, 'point1': [0, -1094.558665436522], 'point2': [1024, 4399.056299407584]}, {'dist': 390.63479461511906, 'angle': 8.547486033519546, 'point1': [0, 2628.253422622636], 'point2': [1024, -4184.859436741448]}, {'dist': 378.6306523990336, 'angle': 10.558659217877087, 'point1': [0, 2066.286557943762], 'point2': [1024, -3427.3284069003516]}, {'dist': 134.54642733862624, 'angle': -15.586592178770958, 'point1': [0, -500.741421600476], 'point2': [1024, 3170.130756830827]}, {'dist': 107.53710735243362, 'angle': -14.581005586592182, 'point1': [0, -427.1608082129439], 'point2': [1024, 3509.3852751713725]}, {'dist': 59.52053848809123, 'angle': -17.5977653631285, 'point1': [0, -196.87098237759034], 'point2': [1024, 3031.6229006572626]}, {'dist': 94.53261995167418, 'angle': -14.581005586592182, 'point1': [0, -375.5041523360297], 'point2': [1024, 3561.0419310482866]}, {'dist': 36.51259924059377, 'angle': -19.60893854748604, 'point1': [0, -108.79844700499878], 'point2': [1024, 2765.508605563489]}, {'dist': -10.503624439074883, 'angle': -24.636871508379887, 'point1': [0, 25.19665509440076], 'point2': [1024, 2258.009245119818]}, {'dist': -112.53883327580252, 'angle': -27.653631284916205, 'point1': [0, 242.4750808373958], 'point2': [1024, 2196.748818938824]}, {'dist': 14.505005177770045, 'angle': -21.620111731843583, 'point1': [0, -39.3675393949443], 'point2': [1024, 2544.311190879769]}, {'dist': 462.6596479116329, 'angle': 17.597765363128488, 'point1': [0, 1530.2996529350496], 'point2': [1024, -1698.1942300998053]}, {'dist': 435.65032792544025, 'angle': -20.614525139664803, 'point1': [0, -1237.3654874319125], 'point2': [1024, 1484.8467528324786]}, {'dist': -33.511563686572345, 'angle': -33.687150837988824, 'point1': [0, 60.418444149378374], 'point2': [1024, 1596.5878716181273]}, {'dist': -348.62029685881953, 'angle': -44.74860335195531, 'point1': [0, 495.2011052507165], 'point2': [1024, 1528.2267731243478]}, {'dist': -126.5436658612357, 'angle': -28.65921787709498, 'point1': [0, 263.85304315922224], 'point2': [1024, 2137.3919573094886]}, {'dist': -375.62961684501215, 'angle': -46.75977653631285, 'point1': [0, 515.6291961539832], 'point2': [1024, 1478.5829119608036]}, {'dist': -66.5229547808076, 'angle': -24.636871508379887, 'point1': [0, 159.57881559787148], 'point2': [1024, 2392.391405623289]}, {'dist': -361.62478425957875, 'angle': -45.754189944134076, 'point1': [0, 504.81368756505094], 'point2': [1024, 1502.2043874148117]}, {'dist': 2.500862961684561, 'angle': 90.0, 'point1': [0, 2.500862961684561], 'point2': [1024, 2.5008629616844984]}, {'dist': -81.52813255091473, 'angle': -25.642458100558663, 'point1': [0, 188.39374779377476], 'point2': [1024, 2321.58847977235]}, {'dist': -23.508111839834328, 'angle': -25.642458100558663, 'point1': [0, 54.32212359697804], 'point2': [1024, 2187.5168555755536]}, {'dist': 191.56610286503292, 'angle': -38.71508379888269, 'point1': [0, -306.28617342226215], 'point2': [1024, 971.1853964687252]}, {'dist': -101.53503624439077, 'angle': -26.64804469273744, 'point1': [0, 226.38364287754356], 'point2': [1024, 2266.988689292519]}, {'dist': -393.6358301691405, 'angle': -47.76536312849162, 'point1': [0, 531.6540890173437], 'point2': [1024, 1461.2892074204462]}, {'dist': -499.6724197445633, 'angle': -53.79888268156425, 'point1': [0, 619.2120529246657], 'point2': [1024, 1368.6974250419942]}, {'dist': -513.6772523299965, 'angle': -54.80446927374302, 'point1': [0, 628.5898512913707], 'point2': [1024, 1350.8227731263046]}, {'dist': 1001.8457024508111, 'angle': 69.88826815642456, 'point1': [0, 1066.9012150900148], 'point2': [1024, 691.9326586558323]}, {'dist': -183.56334138764237, 'angle': -33.687150837988824, 'point1': [0, 330.94879108689315], 'point2': [1024, 1867.1182185556418]}, {'dist': -412.64238867794256, 'angle': -48.77094972067039, 'point1': [0, 548.6675978448864], 'point2': [1024, 1446.0293317305936]}, {'dist': -634.7190196755264, 'angle': -63.85474860335196, 'point1': [0, 707.0661418687114], 'point2': [1024, 1209.7217900569558]}, {'dist': -322.61132205730064, 'angle': -43.74301675977654, 'point1': [0, 466.5890271140599], 'point2': [1024, 1536.5344113064004]}, {'dist': -606.7093545046599, 'angle': -60.83798882681564, 'point1': [0, 694.7753615851902], 'point2': [1024, 1266.1789384019617]}, {'dist': -584.7017604418363, 'angle': -58.82681564245811, 'point1': [0, 683.3768589356165], 'point2': [1024, 1302.878454913484]}, {'dist': 985.8401794960305, 'angle': 82.9608938547486, 'point1': [0, 993.327143592257], 'point2': [1024, 866.8862450943209]}, {'dist': -144.54987918536403, 'angle': -29.664804469273744, 'point1': [0, 292.0642137314287], 'point2': [1024, 2089.8925062850317]}, {'dist': -167.5578184328615, 'angle': -72.90502793296089, 'point1': [0, 175.30290879512037], 'point2': [1024, 490.22808052135855]}, {'dist': -426.64722126337585, 'angle': -49.77653631284917, 'point1': [0, 558.7813264233097], 'point2': [1024, 1424.847485019027]}, {'dist': 500.67276492923725, 'angle': 21.62011173184357, 'point1': [0, 1358.8588598048084], 'point2': [1024, -1224.8198704699064]}, {'dist': -335.6158094580601, 'angle': -44.74860335195531, 'point1': [0, 476.7287541222823], 'point2': [1024, 1509.7544219959136]}, {'dist': -645.7228167069381, 'angle': -64.86033519553074, 'point1': [0, 713.2891951715857], 'point2': [1024, 1193.8305766022004]}, {'dist': -693.7393855712806, 'angle': -69.88826815642459, 'point1': [0, 738.7878109485025], 'point2': [1024, 1113.7563673826846]}, {'dist': -157.55436658612348, 'angle': -30.670391061452523, 'point1': [0, 308.8704756071295], 'point2': [1024, 2035.5149844940706]}, {'dist': -473.6634449430445, 'angle': -52.79329608938548, 'point1': [0, 594.7115207320869], 'point2': [1024, 1372.1586852725138]}, {'dist': -148.55125992405942, 'angle': -70.89385474860336, 'point1': [0, 157.2114389622588], 'point2': [1024, 511.92623464408297]}, {'dist': -537.6855367621678, 'angle': -56.81564245810056, 'point1': [0, 642.4622865357403], 'point2': [1024, 1312.1499027935117]}, {'dist': 122.54228512254053, 'angle': -46.75977653631285, 'point1': [0, -168.2145846307934], 'point2': [1024, 794.7391311760268]}, {'dist': 20.5070762858129, 'angle': -55.81005586592179, 'point1': [0, -24.7915759934954], 'point2': [1024, 670.855411865887]}, {'dist': -526.6817397307559, 'angle': -55.81005586592179, 'point1': [0, 636.7202322231869], 'point2': [1024, 1332.3672200825695]}, {'dist': 346.61960648947183, 'angle': -27.653631284916205, 'point1': [0, -746.8232489791793], 'point2': [1024, 1207.450489122249]}, {'dist': 950.8280980324475, 'angle': 81.9553072625698, 'point1': [0, 960.2779944825088], 'point2': [1024, 815.5495571924287]}, {'dist': -25.508802209181795, 'angle': -59.832402234636874, 'point1': [0, 29.504982589776414], 'point2': [1024, 624.7122072319233]}, {'dist': 537.6855367621679, 'angle': 20.614525139664792, 'point1': [0, 1527.173247978538], 'point2': [1024, -1195.0389922858549]}, {'dist': 88.53054884363132, 'angle': -50.78212290502794, 'point1': [0, -114.27023325426622], 'point2': [1024, 721.4159496366839]}, {'dist': -306.60579910251977, 'angle': -42.737430167597765, 'point1': [0, 451.7947163729022], 'point2': [1024, 1560.039344554533]}, {'dist': -268.5926820849154, 'angle': -40.726256983240226, 'point1': [0, 411.67051118690796], 'point2': [1024, 1601.0773695295152]}, {'dist': 163.55643769416633, 'angle': -40.726256983240226, 'point1': [0, -250.68204312498858], 'point2': [1024, 938.7248152176186]}, {'dist': -233.58060062133245, 'angle': -37.709497206703915, 'point1': [0, 381.8809379126898], 'point2': [1024, 1706.328335358501]}, {'dist': 561.6938211943391, 'angle': -9.553072625698336, 'point1': [0, -3384.4903525096506], 'point2': [1024, 2700.063971346021]}, {'dist': 549.6896789782534, 'angle': -10.5586592178771, 'point1': [0, -2999.800432206329], 'point2': [1024, 2493.814532637778]}, {'dist': 527.6820849154299, 'angle': 23.63128491620111, 'point1': [0, 1316.4100471693323], 'point2': [1024, -1023.949232402344]}, {'dist': 408.64100793924763, 'angle': -22.625698324022345, 'point1': [0, -1062.2070780982006], 'point2': [1024, 1394.6883296146275]}, {'dist': -294.6016568864343, 'angle': -41.731843575419, 'point1': [0, 442.5805974258612], 'point2': [1024, 1590.607762174158]}, {'dist': -441.6523990334829, 'angle': -50.78212290502794, 'point1': [0, 570.0599771950118], 'point2': [1024, 1405.7461600859622]}, {'dist': -126.5436658612357, 'angle': -67.87709497206704, 'point1': [0, 136.60044255744918], 'point2': [1024, 552.8806613895179]}, {'dist': -456.6575768035899, 'angle': -51.787709497206706, 'point1': [0, 581.193203551076], 'point2': [1024, 1387.3574855029021]}, {'dist': 487.6682775284778, 'angle': -14.581005586592182, 'point1': [0, -1937.1245953842795], 'point2': [1024, 1999.4214880000368]}, {'dist': 583.7014152571626, 'angle': -7.541899441340782, 'point1': [0, -4447.208752254486], 'point2': [1024, 3287.13307549747]}, {'dist': 448.65481532619947, 'angle': -17.5977653631285, 'point1': [0, -1483.9770688462033], 'point2': [1024, 1744.5168141886495]}, {'dist': 377.63030721435985, 'angle': -24.636871508379887, 'point1': [0, -905.8797426796486], 'point2': [1024, 1326.9328473457688]}, {'dist': 358.62374870555755, 'angle': -26.64804469273744, 'point1': [0, -799.5914874049199], 'point2': [1024, 1241.0135590100558]}, {'dist': 297.6026924404557, 'angle': -31.675977653631286, 'point1': [0, -566.7382515606452], 'point2': [1024, 1092.8149700226254]}, {'dist': -247.58543320676563, 'angle': -38.71508379888269, 'point1': [0, 395.8528873212002], 'point2': [1024, 1673.3244572121873]}, {'dist': -715.7469796341043, 'angle': -71.89944134078212, 'point1': [0, 753.0114830287199], 'point2': [1024, 1087.7173249603836]}, {'dist': -210.572661373835, 'angle': -35.69832402234638, 'point1': [0, 360.867800950327], 'point2': [1024, 1786.0025605320034]}, {'dist': 106.53676216775989, 'angle': -47.76536312849162, 'point1': [0, -143.89113209745153], 'point2': [1024, 785.7439863056509]}, {'dist': 63.521919226786395, 'angle': -52.79329608938548, 'point1': [0, -79.75539929564427], 'point2': [1024, 697.6917652447825]}, {'dist': -13.504659993096311, 'angle': -58.82681564245811, 'point1': [0, 15.783725569941534], 'point2': [1024, 635.2853215478091]}, {'dist': -48.516741456679256, 'angle': -61.84357541899441, 'point1': [0, 55.02869476258885], 'point2': [1024, 603.0903929144031]}, {'dist': -194.56713841905412, 'angle': -34.692737430167604, 'point1': [0, 341.8404416006442], 'point2': [1024, 1821.0848354373245]}, {'dist': -668.7307559544356, 'angle': -66.87150837988827, 'point1': [0, 727.1766442304686], 'point2': [1024, 1164.5516343528418]}, {'dist': -732.7528477735589, 'angle': -74.91620111731844, 'point1': [0, 758.8997888890145], 'point2': [1024, 1034.8855881274642]}, {'dist': 573.6979634104246, 'angle': -8.547486033519558, 'point1': [0, -3859.9317231090386], 'point2': [1024, 2953.1811362550343]}, {'dist': -804.7777010700725, 'angle': -78.93854748603351, 'point1': [0, 820.0119094382176], 'point2': [1024, 1020.197371438806]}, {'dist': 473.6634449430446, 'angle': -15.586592178770958, 'point1': [0, -1762.8331831065077], 'point2': [1024, 1908.0389953247955]}, {'dist': 335.6158094580601, 'angle': -28.65921787709498, 'point1': [0, -699.7841579440245], 'point2': [1024, 1173.754756206242]}, {'dist': 536.6851915774939, 'angle': -11.564245810055876, 'point1': [0, -2677.1801057800594], 'point2': [1024, 2327.211416147395]}, {'dist': -281.59716948567484, 'angle': -41.731843575419, 'point1': [0, 423.0439326838027], 'point2': [1024, 1571.0710974320996]}, {'dist': -548.6893337935795, 'angle': -57.82122905027933, 'point1': [0, 648.2696850849752], 'point2': [1024, 1292.5871544341549]}, {'dist': -563.6945115636865, 'angle': -57.82122905027933, 'point1': [0, 665.9981176761778], 'point2': [1024, 1310.3155870253572]}, {'dist': -747.7580255436659, 'angle': -76.92737430167598, 'point1': [0, 767.6523946995826], 'point2': [1024, 1005.4289847203167]}, {'dist': 620.7141870900932, 'angle': -4.525139664804477, 'point1': [0, -7867.448413923172], 'point2': [1024, 5071.1221001450795]}, {'dist': -758.7618225750776, 'angle': -77.93296089385476, 'point1': [0, 775.9065139923456], 'point2': [1024, 994.8170117005394]}, {'dist': 1018.851570590266, 'angle': 66.87150837988824, 'point1': [0, 1107.8974003720755], 'point2': [1024, 670.5224102497017]}, {'dist': -37.512944425267506, 'angle': -60.83798882681564, 'point1': [0, 42.9580808894388], 'point2': [1024, 614.3616577062103]}, {'dist': -108.53745253710736, 'angle': -65.8659217877095, 'point1': [0, 118.93327314363441], 'point2': [1024, 577.7217245843093]}, {'dist': 576.698998964446, 'angle': 23.63128491620111, 'point1': [0, 1438.6926866220283], 'point2': [1024, -901.666592949648]}, {'dist': 462.6596479116329, 'angle': -16.592178770949722, 'point1': [0, -1620.1975802121738], 'point2': [1024, 1816.455553127895]}, {'dist': 323.6116672419746, 'angle': -29.664804469273744, 'point1': [0, -653.8600217447565], 'point2': [1024, 1143.9682708088465]}, {'dist': 285.59855022437, 'angle': -32.681564245810065, 'point1': [0, -528.9160544497976], 'point2': [1024, 1067.2573585529199]}, {'dist': 51.517777010700684, 'angle': -53.79888268156425, 'point1': [0, -63.842684135375904], 'point2': [1024, 685.6426879819525]}, {'dist': -913.8153261995167, 'angle': -88.99441340782123, 'point1': [0, 913.9560857491963], 'point2': [1024, 931.9299473602971]}, {'dist': 525.6813945460822, 'angle': -12.56983240223464, 'point1': [0, -2415.4892336565554], 'point2': [1024, 2176.980296495553]}, {'dist': -681.735243355195, 'angle': -68.88268156424581, 'point1': [0, 730.81324175777], 'point2': [1024, 1126.2976018475515]}, {'dist': 272.5940628236108, 'angle': -33.687150837988824, 'point1': [0, -491.4634636031523], 'point2': [1024, 1044.7059638655967]}, {'dist': 595.7055574732483, 'angle': -6.536312849162018, 'point1': [0, -5233.158249745151], 'point2': [1024, 3704.011462998973]}, {'dist': -187.56472212633753, 'angle': -74.91620111731844, 'point1': [0, 194.25762514223914], 'point2': [1024, 470.24342438068896]}, {'dist': 929.8208491542978, 'angle': 88.99441340782121, 'point1': [0, 929.9640741148093], 'point2': [1024, 911.9902125037082]}, {'dist': 607.7096996893338, 'angle': -6.536312849162018, 'point1': [0, -5338.612320268981], 'point2': [1024, 3598.5573924751425]}, {'dist': 509.6758715913013, 'angle': -14.581005586592182, 'point1': [0, -2024.5435514836722], 'point2': [1024, 1912.002531900644]}, {'dist': 31.51087331722465, 'angle': -54.80446927374302, 'point1': [0, -38.56003956315119], 'point2': [1024, 683.6728822717826]}, {'dist': 726.7507766655162, 'angle': 4.525139664804464, 'point1': [0, 9211.44443628558], 'point2': [1024, -3727.1260777827088]}, {'dist': 594.7052122885746, 'angle': 30.67039106145251, 'point1': [0, 1165.863477767865], 'point2': [1024, -560.7810311190767]}]\n",
      "\n",
      "Shorlisted lines\n",
      "Angle: 13.58, Dist: 418.64\n",
      "Angle: 10.56, Dist: 378.63\n",
      "Angle: 17.60, Dist: 462.66\n",
      "Angle: 21.62, Dist: 500.67\n",
      "Angle: 20.61, Dist: 537.69\n",
      "Angle: 23.63, Dist: 527.68\n",
      "Angle: 23.63, Dist: 576.70\n",
      "Angle: 30.67, Dist: 594.71\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x178b07d8>"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "image = read_image(clahe_img)\n",
    "canny_image = apply_canny(image)\n",
    "lines = get_hough_lines(canny_image)\n",
    "shortlisted_lines = shortlist_lines(lines)\n",
    "    \n",
    "rr, cc = remove_pectoral(shortlisted_lines)\n",
    "image[rr, cc] = 0\n",
    "plt.imshow(image,cmap=pylab.cm.gray)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [],
   "source": [
    "image = np.array(image, dtype = 'int')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "image[image == 0] = 2"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
