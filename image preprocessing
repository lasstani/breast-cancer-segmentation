{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import cv2\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "\n",
    "import math\n",
    "\n",
    "from matplotlib import pylab as pylab\n",
    "from skimage import io\n",
    "from skimage import color\n",
    "from skimage.feature import canny\n",
    "from skimage.filters import sobel\n",
    "\n",
    "path= r'D:\\tanya\\Downloads\\all-mias\\mdb001.pgm'\n",
    "im = cv2.imread(path)\n",
    "\n",
    "imgray = cv2.cvtColor(im, cv2.COLOR_BGR2GRAY)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Функция для вывода изображения."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "def viewImage(image, name_of_window):\n",
    "    cv2.namedWindow(name_of_window, cv2.WINDOW_NORMAL)\n",
    "    cv2.imshow(name_of_window, image)\n",
    "    cv2.waitKey(0)\n",
    "    cv2.destroyAllWindows()\n",
    "#viewImage(img,'img')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "def minMaxNormalise(img):\n",
    "\n",
    "    norm_img = (img - img.min()) / (img.max() - img.min())\n",
    "\n",
    "    return norm_img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "norm_img = minMaxNormalise(imgray)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "def globalBinarise(img, thresh, maxval):\n",
    "\n",
    "    binarised_img = np.zeros(img.shape)\n",
    "    binarised_img[img >= thresh] = maxval\n",
    "\n",
    "    return binarised_img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "binarised_img = globalBinarise(norm_img, 0.2 ,1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "def editMask(mask, ksize=(23, 23), operation=\"open\"):\n",
    "\n",
    "    kernel = cv2.getStructuringElement(shape=cv2.MORPH_RECT, ksize=ksize)\n",
    "    \n",
    "    if operation == \"open\":\n",
    "        edited_mask = cv2.morphologyEx(mask, cv2.MORPH_OPEN, kernel)\n",
    "    elif operation == \"close\":\n",
    "        edited_mask = cv2.morphologyEx(mask, cv2.MORPH_CLOSE, kernel)\n",
    "\n",
    "    # Then dilate\n",
    "    edited_mask = cv2.morphologyEx(edited_mask, cv2.MORPH_DILATE, kernel)\n",
    "\n",
    "    return edited_mask"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "edited_mask = editMask(binarised_img, ksize=(23, 23), operation=\"open\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "edited_mask = edited_mask.astype(np.uint8)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "def sortContoursByArea(contours, reverse=True):\n",
    "\n",
    "    # Sort contours based on contour area.\n",
    "    sorted_contours = sorted(contours, key=cv2.contourArea, reverse=reverse)\n",
    "\n",
    "    # Construct the list of corresponding bounding boxes.\n",
    "    bounding_boxes = [cv2.boundingRect(c) for c in sorted_contours]\n",
    "\n",
    "    return sorted_contours, bounding_boxes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "def xLargestBlobs(mask, top_x=None, reverse=True):\n",
    "\n",
    "    # Find all contours from binarised image.\n",
    "    # Note: parts of the image that you want to get should be white.\n",
    "    contours, hierarchy = cv2.findContours(\n",
    "        image=mask, mode=cv2.RETR_EXTERNAL, method=cv2.CHAIN_APPROX_NONE\n",
    "    )\n",
    "\n",
    "    n_contours = len(contours)\n",
    "\n",
    "    # Only get largest blob if there is at least 1 contour.\n",
    "    if n_contours > 0:\n",
    "\n",
    "        # Make sure that the number of contours to keep is at most equal\n",
    "        # to the number of contours present in the mask.\n",
    "        if n_contours < top_x or top_x == None:\n",
    "            top_x = n_contours\n",
    "\n",
    "        # Sort contours based on contour area.\n",
    "        sorted_contours, bounding_boxes = sortContoursByArea(\n",
    "            contours=contours, reverse=reverse\n",
    "        )\n",
    "\n",
    "        # Get the top X largest contours.\n",
    "        X_largest_contours = sorted_contours[0:top_x]\n",
    "\n",
    "        # Create black canvas to draw contours on.\n",
    "        to_draw_on = np.zeros(mask.shape, dtype = 'int')\n",
    "\n",
    "        # Draw contours in X_largest_contours.\n",
    "        X_largest_blobs = cv2.drawContours(\n",
    "            image=to_draw_on,  # Draw the contours on `to_draw_on`.\n",
    "            contours=X_largest_contours,  # List of contours to draw.\n",
    "            contourIdx=-1,  # Draw all contours in `contours`.\n",
    "            color=1,  # Draw the contours in white.\n",
    "            thickness=-1,  # Thickness of the contour lines.\n",
    "        )\n",
    "\n",
    "    return n_contours, X_largest_blobs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "_, xlargest_mask  = xLargestBlobs(mask=edited_mask, top_x=1, reverse=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "def applyMask(img, mask):\n",
    "\n",
    "    masked_img = img.copy()\n",
    "    masked_img[mask == 0] = 0\n",
    "\n",
    "    return masked_img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "masked_img=applyMask(img=norm_img, mask = xlargest_mask)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "def checkLRFlip(mask):\n",
    "\n",
    "    # Get number of rows and columns in the image.\n",
    "    nrows, ncols = mask.shape\n",
    "    x_center = ncols // 2\n",
    "    y_center = nrows // 2\n",
    "\n",
    "    # Sum down each column.\n",
    "    col_sum = mask.sum(axis=0)\n",
    "    # Sum across each row.\n",
    "    row_sum = mask.sum(axis=1)\n",
    "\n",
    "    left_sum = sum(col_sum[0:x_center])\n",
    "    right_sum = sum(col_sum[x_center:-1])\n",
    "\n",
    "    if left_sum < right_sum:\n",
    "        LR_flip = True\n",
    "    else:\n",
    "        LR_flip = False\n",
    "\n",
    "    return LR_flip\n",
    "\n",
    "\n",
    "def makeLRFlip(img):\n",
    "\n",
    "    flipped_img = np.fliplr(img)\n",
    "\n",
    "    return flipped_img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "lr_flip = checkLRFlip(mask=xlargest_mask)\n",
    "if lr_flip:\n",
    "    flipped_img = makeLRFlip(img=masked_img)\n",
    "elif not lr_flip:\n",
    "    flipped_img = masked_img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "def clahe(img, clip=2.0, tile=(8, 8)):\n",
    "\n",
    "    img = cv2.normalize(\n",
    "        img,\n",
    "        None,\n",
    "        alpha=0,\n",
    "        beta=255,\n",
    "        norm_type=cv2.NORM_MINMAX,\n",
    "        dtype=cv2.CV_32F,\n",
    "    )\n",
    "    img_uint8 = img.astype(\"uint8\")\n",
    "\n",
    "    clahe_create = cv2.createCLAHE(clipLimit=clip, tileGridSize=tile)\n",
    "    clahe_img = clahe_create.apply(img_uint8)\n",
    "\n",
    "    return clahe_img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "clahe_img = clahe(flipped_img, clip=1.0, tile=(8, 8))\n",
    "viewImage(clahe_img,\"clahe_img\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "clahe_img = clahe_img.astype(np.uint8)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "def read_image(image):\n",
    "    image = color.rgb2gray(image)\n",
    "    return image"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "def apply_canny(image):\n",
    "    canny_img = canny(image,1.5)\n",
    "    return sobel(canny_img)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "from skimage.transform import hough_line, hough_line_peaks\n",
    "\n",
    "def get_hough_lines(canny_img):\n",
    "    h, theta, d = hough_line(canny_img)\n",
    "    lines = list()\n",
    "    print('\\nAll hough lines')\n",
    "    for _, angle, dist in zip(*hough_line_peaks(h, theta, d)):\n",
    "        print(\"Angle: {:.2f}, Dist: {:.2f}\".format(np.degrees(angle), dist))\n",
    "        x1 = 0\n",
    "        y1 = (dist - x1 * np.cos(angle)) / np.sin(angle)\n",
    "        x2 = canny_img.shape[1]\n",
    "        y2 = (dist - x2 * np.cos(angle)) / np.sin(angle)\n",
    "        lines.append({\n",
    "            'dist': dist,\n",
    "            'angle': np.degrees(angle),\n",
    "            'point1': [x1, y1],\n",
    "            'point2': [x2, y2]\n",
    "        })\n",
    "    print(lines)\n",
    "    \n",
    "    return lines"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "def shortlist_lines(lines):\n",
    "    MIN_ANGLE = 10\n",
    "    MAX_ANGLE = 50\n",
    "    MIN_DIST  = 50\n",
    "    MAX_DIST  = 700\n",
    "    \n",
    "    shortlisted_lines = [x for x in lines if \n",
    "                          (x['dist']>=MIN_DIST) &\n",
    "                          (x['dist']<=MAX_DIST) &\n",
    "                          (x['angle']>=MIN_ANGLE) &\n",
    "                          (x['angle']<=MAX_ANGLE)\n",
    "                        ]\n",
    "    print('\\nShorlisted lines')\n",
    "    for i in shortlisted_lines:\n",
    "        print(\"Angle: {:.2f}, Dist: {:.2f}\".format(i['angle'], i['dist']))\n",
    "        \n",
    "    return shortlisted_lines"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "from skimage.draw import polygon\n",
    "\n",
    "def remove_pectoral(shortlisted_lines):\n",
    "    shortlisted_lines.sort(key = lambda x: x['dist'])\n",
    "    pectoral_line = shortlisted_lines[0]\n",
    "    d = pectoral_line['dist']\n",
    "    theta = np.radians(pectoral_line['angle'])\n",
    "    \n",
    "    x_intercept = d/np.cos(theta)\n",
    "    y_intercept = d/np.sin(theta)\n",
    "    \n",
    "    return polygon([0, 0, y_intercept], [0, x_intercept, 0], image.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "All hough lines\n",
      "Angle: 90.00, Dist: 2.50\n",
      "Angle: -0.50, Dist: 253.59\n",
      "Angle: 29.66, Dist: 424.65\n",
      "Angle: 2.51, Dist: 556.69\n",
      "[{'dist': 2.500862961684561, 'angle': 90.0, 'point1': [0, 2.500862961684561], 'point2': [1024, 2.5008629616844984]}, {'dist': 253.58750431480848, 'angle': -0.5027932960893948, 'point1': [0, -28897.919541614025], 'point2': [1024, 87788.94290288194]}, {'dist': 424.6465308940283, 'angle': 29.664804469273744, 'point1': [0, 858.0017905120525], 'point2': [1024, -939.8265020415505]}, {'dist': 556.69209527097, 'angle': 2.513966480446923, 'point1': [0, 12691.634690291057], 'point2': [1024, -10631.358266274874]}]\n",
      "\n",
      "Shorlisted lines\n",
      "Angle: 29.66, Dist: 424.65\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x19248fa0>"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "image = read_image(clahe_img)\n",
    "canny_image = apply_canny(image)\n",
    "lines = get_hough_lines(canny_image)\n",
    "shortlisted_lines = shortlist_lines(lines)\n",
    "    \n",
    "rr, cc = remove_pectoral(shortlisted_lines)\n",
    "image[rr, cc] = 0\n",
    "plt.imshow(image,cmap=pylab.cm.gray)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "image = np.array(image, dtype = 'int')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "image[image == 0] = 2"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
